################################################################################
# This workflow will do a clean install of node dependencies, build the source
# code and run tests across different versions of node.
#
# For more information see:
#
#   https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions
#
################################################################################

name: Node.js CI

# Controls when the action will run. Triggers the workflow on push or pull
# request events but only for the master branch
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

# A workflow run is made up of one or more jobs that can run sequentially or in
# parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: Linux
            node-version: 14
          #- os: macOS
          #  node-version: 14
          #- os: ubuntu-16.04
          #  node-version: 12
          #- os: ubuntu-20.04
          #  node-version: 14

    # Steps represent a sequence of tasks that will be executed as part of the
    # job
    steps:
      - name: Build environment information
        run: 'echo "Matrix OS: ${{ matrix.os }} on $HOSTNAME with $(getconf _NPROCESSORS_ONLN) cores"'

        # Check-out the repository under $GITHUB_WORKSPACE, so the job can
        # access it
      - name: Checkout main repo
        uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Restore node modules
        id: restore-node
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            package-lock.json
          key: npm-install-${{ matrix.node-version }}-${{ matrix.os }}-${{ hashFiles('package.json', 'tools/npm-install.sh') }}

      # npm ci is required, instead of npm install, because we recursively
      # patch sub-dependencies in the post-install step and require correct
      # versions for the patches to apply.
      #
      # However, although package-lock.json is generated and updated in the
      # preinstall step, npm ci won't run if package-lock.json doesn't exist
      # yet. Chicken, meet egg.
      #
      # To get around this, manually run the preinstall step once evey time
      # the project is cleaned:
      #
      #   npm run preinstall
      #
      # Instead of npm install, run:
      #
      #   npm ci
      #
      - name: npm run preinstall
        if: steps.restore-node.outputs.cache-hit != 'true'
        run: npm run preinstall

      - name: npm ci
        if: steps.restore-node.outputs.cache-hit != 'true'
        run: npm ci

      - name: npm run audit
        run: npm run audit

      - name: Restore OpenCV library
        id: restore-opencv
        uses: actions/cache@v2
        with:
          path: |
            src/generated/opencv.js
          key: restore-opencv-${{ matrix.os }}-${{ hashFiles('tools/depends/ade/*', 'tools/depends/ceres-solver/*', 'tools/depends/eigen/*', 'tools/depends/emscripten/*', 'tools/depends/google-flags/*', 'tools/depends/google-log/*', 'tools/depends/opencv/*') }}

      - name: Restore dependency binaries
        id: restore-binaries
        uses: actions/cache@v2
        with:
          path: |
            tools/bin
          key: restore-binaries-${{ matrix.os }}-${{ hashFiles('tools/depends/solidity/*') }}

      - name: apt update
        if: matrix.os != 'macOS' && steps.restore-binaries.outputs.cache-hit != 'true'
        run: |
          sudo apt update || :

      - name: apt install build-essential
        if: matrix.os != 'macOS' && steps.restore-binaries.outputs.cache-hit != 'true'
        run: |
          dpkg -s build-essential 1> /dev/null 2> /dev/null || sudo apt install -y build-essential

      - name: apt install cmake
        if: matrix.os != 'macOS' && steps.restore-binaries.outputs.cache-hit != 'true'
        run: |
          dpkg -s cmake 1> /dev/null 2> /dev/null || sudo apt install -y cmake

      - name: apt install git
        if: matrix.os != 'macOS' && steps.restore-binaries.outputs.cache-hit != 'true'
        run: |
          dpkg -s git 1> /dev/null 2> /dev/null || sudo apt install -y git

      - name: apt install libboost-all-dev
        if: matrix.os != 'macOS' && steps.restore-binaries.outputs.cache-hit != 'true'
        run: |
          dpkg -s libboost-all-dev 1> /dev/null 2> /dev/null || sudo apt install -y libboost-all-dev

      - name: brew update && brew upgrade
        if: matrix.os == 'macOS' && steps.restore-binaries.outputs.cache-hit != 'true'
        run: |
          brew update && brew upgrade

      - name: brew install cmake
        if: matrix.os == 'macOS' && steps.restore-binaries.outputs.cache-hit != 'true'
        run: |
          brew install cmake

      - name: brew install git
        if: matrix.os == 'macOS' && steps.restore-binaries.outputs.cache-hit != 'true'
        run: |
          brew install git

      - name: brew install boost
        if: matrix.os == 'macOS' && steps.restore-binaries.outputs.cache-hit != 'true'
        run: |
          brew install boost

      - name: Restore C++ libraries
        id: restore-libraries
        uses: actions/cache@v2
        with:
          path: |
            public/motion_tracker/motion_tracker.js
            public/motion_tracker/motion_tracker.wasm
          key: restore-libraries-${{ matrix.os }}-${{ hashFiles('lib/*', 'lib/**/*', 'tools/depends/ade/*', 'tools/depends/ceres-solver/*', 'tools/depends/eigen/*', 'tools/depends/emscripten/*', 'tools/depends/google-flags/*', 'tools/depends/google-log/*', 'tools/depends/opencv/*') }}

      - name: Restore build dependencies
        id: restore-library-depends
        uses: actions/cache@v2
        if: steps.restore-libraries.outputs.cache-hit != 'true' || steps.restore-opencv.outputs.cache-hit != 'true' || steps.restore-binaries.outputs.cache-hit != 'true'
        with:
          path: |
            tools/dist
          key: restore-library-depends-${{ matrix.os }}-${{ hashFiles('tools/depends/ade/*', 'tools/depends/ceres-solver/*', 'tools/depends/eigen/*', 'tools/depends/emscripten/*', 'tools/depends/google-flags/*', 'tools/depends/google-log/*', 'tools/depends/opencv/*') }}

      - name: Restore ADE build files
        id: restore-ade-build
        uses: actions/cache@v2
        if: (steps.restore-libraries.outputs.cache-hit != 'true' || steps.restore-opencv.outputs.cache-hit != 'true') && steps.restore-library-depends.outputs.cache-hit != 'true'
        with:
          path: |
            tools/repos/ade
            tools/build/ade
          key: restore-ade-build-${{ matrix.os }}-${{ hashFiles('tools/depends/ade/*', 'tools/depends/emscripten/*') }}

      - name: Restore gflags build files
        id: restore-gflags-build
        uses: actions/cache@v2
        if: (steps.restore-libraries.outputs.cache-hit != 'true' || steps.restore-opencv.outputs.cache-hit != 'true') && steps.restore-library-depends.outputs.cache-hit != 'true'
        with:
          path: |
            tools/repos/gflags
            tools/build/gflags
          key: restore-gflags-build-${{ matrix.os }}-${{ hashFiles('tools/depends/emscripten/*', 'tools/depends/google-flags/*') }}

      - name: Restore Google Logging Library build files
        id: restore-glog-build
        uses: actions/cache@v2
        if: (steps.restore-libraries.outputs.cache-hit != 'true' || steps.restore-opencv.outputs.cache-hit != 'true') && steps.restore-library-depends.outputs.cache-hit != 'true'
        with:
          path: |
            tools/repos/glog
            tools/build/glog
          key: restore-glog-build-${{ matrix.os }}-${{ hashFiles('tools/depends/emscripten/*', 'tools/depends/google-log/*') }}

      - name: Restore Eigen build files
        id: restore-eigen-build
        uses: actions/cache@v2
        if: (steps.restore-libraries.outputs.cache-hit != 'true' || steps.restore-opencv.outputs.cache-hit != 'true') && steps.restore-library-depends.outputs.cache-hit != 'true'
        with:
          path: |
            tools/repos/eigen
            tools/build/eigen
          key: restore-eigen-build-${{ matrix.os }}-${{ hashFiles('tools/depends/eigen/*', 'tools/depends/emscripten/*') }}

      - name: Restore Ceres build files
        id: restore-ceres-build
        uses: actions/cache@v2
        if: (steps.restore-libraries.outputs.cache-hit != 'true' || steps.restore-opencv.outputs.cache-hit != 'true') && steps.restore-library-depends.outputs.cache-hit != 'true'
        with:
          path: |
            tools/repos/ceres-solver
            tools/build/ceres-solver
          key: restore-ceres-build-${{ matrix.os }}-${{ hashFiles('tools/depends/ceres-solver/*', 'tools/depends/emscripten/*') }}

      - name: Restore OpenCV build files
        id: restore-opencv-build
        uses: actions/cache@v2
        if: (steps.restore-libraries.outputs.cache-hit != 'true' || steps.restore-opencv.outputs.cache-hit != 'true') && steps.restore-library-depends.outputs.cache-hit != 'true'
        with:
          path: |
            tools/repos/opencv
            tools/repos/opencv_contrib
            tools/build/opencv
          key: restore-opencv-build-${{ matrix.os }}-${{ hashFiles('tools/depends/emscripten/*', 'tools/depends/opencv/*') }}

      - name: Build depends
        if: steps.restore-libraries.outputs.cache-hit != 'true' || steps.restore-opencv.outputs.cache-hit != 'true' || steps.restore-binaries.outputs.cache-hit != 'true'
        run: npm run depends

      - name: npm run build
        run: npm run build

      - name: npm test
        run: npm test
