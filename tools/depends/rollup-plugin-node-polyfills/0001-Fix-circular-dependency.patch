From 11cbd31d9ca917a3ce9754a8e564c928b2d7b540 Mon Sep 17 00:00:00 2001
From: Marquise Stein <botocratic@gmail.com>
Date: Sat, 7 Nov 2020 06:27:20 -0800
Subject: [PATCH] Fix circular dependency

At the time `inherits(Duplex, Readable);` is called, Readable is
hoisted but not yet defined due to a circular dependency. Fix this
by removing the circular depedency.
---
 polyfills/readable-stream/duplex.js   |  4 ++--
 polyfills/readable-stream/readable.js |  9 ++++-----
 polyfills/readable-stream/writable.js | 11 +++++------
 polyfills/stream.js                   |  2 +-
 4 files changed, 12 insertions(+), 14 deletions(-)

diff --git a/polyfills/readable-stream/duplex.js b/polyfills/readable-stream/duplex.js
index ecc01a7..4939720 100644
--- a/polyfills/readable-stream/duplex.js
+++ b/polyfills/readable-stream/duplex.js
@@ -16,8 +16,8 @@ export default Duplex;
 export function Duplex(options) {
   if (!(this instanceof Duplex)) return new Duplex(options);
 
-  Readable.call(this, options);
-  Writable.call(this, options);
+  Readable.call(this, options, true);
+  Writable.call(this, options, true);
 
   if (options && options.readable === false) this.readable = false;
 
diff --git a/polyfills/readable-stream/readable.js b/polyfills/readable-stream/readable.js
index 71b3be5..c5cb7e8 100644
--- a/polyfills/readable-stream/readable.js
+++ b/polyfills/readable-stream/readable.js
@@ -6,7 +6,6 @@ import EventEmitter from 'events';
 import {inherits, debuglog} from 'util';
 import BufferList from './buffer-list';
 import {StringDecoder} from 'string_decoder';
-import {Duplex} from './duplex';
 import {nextTick} from 'process';
 
 var debug = debuglog('stream');
@@ -33,7 +32,7 @@ function prependListener(emitter, event, fn) {
 function listenerCount (emitter, type) {
   return emitter.listeners(type).length;
 }
-function ReadableState(options, stream) {
+function ReadableState(options, stream, isDuplex) {
 
   options = options || {};
 
@@ -41,7 +40,7 @@ function ReadableState(options, stream) {
   // make all the buffer merging and length checks go away
   this.objectMode = !!options.objectMode;
 
-  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
+  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
 
   // the point at which it stops calling _read() to fill the buffer
   // Note: 0 is a valid value, means "don't call _read preemptively ever"
@@ -100,11 +99,11 @@ function ReadableState(options, stream) {
   }
 }
 export default Readable;
-export function Readable(options) {
+export function Readable(options, isDuplex) {
 
   if (!(this instanceof Readable)) return new Readable(options);
 
-  this._readableState = new ReadableState(options, this);
+  this._readableState = new ReadableState(options, this, isDuplex);
 
   // legacy
   this.readable = true;
diff --git a/polyfills/readable-stream/writable.js b/polyfills/readable-stream/writable.js
index f345a6b..03e9a9a 100644
--- a/polyfills/readable-stream/writable.js
+++ b/polyfills/readable-stream/writable.js
@@ -7,7 +7,6 @@ import {inherits, deprecate} from 'util';
 import {Buffer} from 'buffer';
 Writable.WritableState = WritableState;
 import {EventEmitter} from 'events';
-import {Duplex} from './duplex';
 import {nextTick} from 'process';
 inherits(Writable, EventEmitter);
 
@@ -20,7 +19,7 @@ function WriteReq(chunk, encoding, cb) {
   this.next = null;
 }
 
-function WritableState(options, stream) {
+function WritableState(options, stream, isDuplex) {
   Object.defineProperty(this, 'buffer', {
     get: deprecate(function () {
       return this.getBuffer();
@@ -32,7 +31,7 @@ function WritableState(options, stream) {
   // contains buffers or objects.
   this.objectMode = !!options.objectMode;
 
-  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
+  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
 
   // the point at which write() starts returning false
   // Note: 0 is a valid value, means that we always return false if
@@ -129,13 +128,13 @@ WritableState.prototype.getBuffer = function writableStateGetBuffer() {
 };
 
 export default Writable;
-export function Writable(options) {
+export function Writable(options, isDuplex) {
 
   // Writable ctor is applied to Duplexes, though they're not
   // instanceof Writable, they're instanceof Readable.
-  if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);
+  if (!(this instanceof Writable) && !isDuplex) return new Writable(options);
 
-  this._writableState = new WritableState(options, this);
+  this._writableState = new WritableState(options, this, isDuplex);
 
   // legacy.
   this.writable = true;
diff --git a/polyfills/stream.js b/polyfills/stream.js
index 8cf9974..b6bbdba 100644
--- a/polyfills/stream.js
+++ b/polyfills/stream.js
@@ -1,9 +1,9 @@
 import EE from 'events';
 import {inherits} from 'util';
 
-import {Duplex} from './readable-stream/duplex.js';
 import {Readable} from './readable-stream/readable.js';
 import {Writable} from './readable-stream/writable.js';
+import {Duplex} from './readable-stream/duplex.js';
 import {Transform} from './readable-stream/transform.js';
 import {PassThrough} from './readable-stream/passthrough.js';
 inherits(Stream, EE);
-- 
2.17.1

